{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class NotesService {\n  constructor(http) {\n    this.http = http;\n    this.url = 'http://localhost:9090/';\n  }\n  //calling the server to generate token\n  // generateToken(credentials: {}) {\n  //   return this.http.post(this.url + 'api/generate-token', credentials);\n  // }\n  loginUser(token) {\n    localStorage.setItem('token', token);\n    return true;\n  }\n  isLoggedIn() {\n    let token = localStorage.getItem('token');\n    console.log(token);\n    if (token == undefined || token == null || token == '') {\n      return false;\n    }\n    return true;\n  }\n  removeToken() {\n    localStorage.removeItem('token');\n    return true;\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  login(data) {\n    return this.http.post(this.url + 'login/user', data, {\n      responseType: 'text'\n    });\n  }\n  postregister(data) {\n    return this.http.post(this.url + 'register/user', data, {\n      responseType: 'text'\n    });\n  }\n  getAllNotes(id) {\n    console.log(this.url + 'notes/id/' + id);\n    return this.http.get(this.url + 'notes/id/' + id);\n  }\n  addNote(note) {\n    return this.http.post(this.url + 'notes/', note, {\n      responseType: 'text'\n    });\n  }\n  deleteNote(id) {\n    return this.http.delete(this.url + 'notes/' + id, {\n      responseType: 'text'\n    });\n  }\n}\n_class = NotesService;\n_class.ɵfac = function NotesService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["NotesService","constructor","http","url","loginUser","token","localStorage","setItem","isLoggedIn","getItem","console","log","undefined","removeToken","removeItem","getToken","login","data","post","responseType","postregister","getAllNotes","id","get","addNote","note","deleteNote","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\namangarg01\\Desktop\\Angular Codes\\MiniExitAssignment\\src\\app\\services\\notes.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotesService {\n  constructor(private http: HttpClient) {}\n\n  url = 'http://localhost:9090/';\n\n  //calling the server to generate token\n  // generateToken(credentials: {}) {\n  //   return this.http.post(this.url + 'api/generate-token', credentials);\n  // }\n\n  loginUser(token: any) {\n    localStorage.setItem('token', token);\n    return true;\n  }\n  isLoggedIn() {\n    let token = localStorage.getItem('token');\n    console.log(token);\n    if (token == undefined || token == null || token == '') {\n      return false;\n    }\n    return true;\n  }\n\n  removeToken() {\n    localStorage.removeItem('token');\n    return true;\n  }\n\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n  login(data: any) {\n    return this.http.post(this.url + 'login/user', data, {\n      responseType: 'text',\n    });\n  }\n\n  postregister(data: any) {\n    return this.http.post(this.url + 'register/user', data, {\n      responseType: 'text',\n    });\n  }\n\n  getAllNotes(id: any) {\n    console.log(this.url + 'notes/id/' + id);\n    return this.http.get(this.url + 'notes/id/' + id);\n  }\n  addNote(note: any) {\n    return this.http.post(this.url + 'notes/', note, {\n      responseType: 'text',\n    });\n  }\n  deleteNote(id: any) {\n    return this.http.delete(this.url + 'notes/' + id, {\n      responseType: 'text',\n    });\n  }\n}\n"],"mappings":";;;AAKA,OAAM,MAAOA,YAAY;EACvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAExB,KAAAC,GAAG,GAAG,wBAAwB;EAFS;EAIvC;EACA;EACA;EACA;EAEAC,SAASA,CAACC,KAAU;IAClBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;IACpC,OAAO,IAAI;EACb;EACAG,UAAUA,CAAA;IACR,IAAIH,KAAK,GAAGC,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;IACzCC,OAAO,CAACC,GAAG,CAACN,KAAK,CAAC;IAClB,IAAIA,KAAK,IAAIO,SAAS,IAAIP,KAAK,IAAI,IAAI,IAAIA,KAAK,IAAI,EAAE,EAAE;MACtD,OAAO,KAAK;;IAEd,OAAO,IAAI;EACb;EAEAQ,WAAWA,CAAA;IACTP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;IAChC,OAAO,IAAI;EACb;EAEAC,QAAQA,CAAA;IACN,OAAOT,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;EACtC;EAEAO,KAAKA,CAACC,IAAS;IACb,OAAO,IAAI,CAACf,IAAI,CAACgB,IAAI,CAAC,IAAI,CAACf,GAAG,GAAG,YAAY,EAAEc,IAAI,EAAE;MACnDE,YAAY,EAAE;KACf,CAAC;EACJ;EAEAC,YAAYA,CAACH,IAAS;IACpB,OAAO,IAAI,CAACf,IAAI,CAACgB,IAAI,CAAC,IAAI,CAACf,GAAG,GAAG,eAAe,EAAEc,IAAI,EAAE;MACtDE,YAAY,EAAE;KACf,CAAC;EACJ;EAEAE,WAAWA,CAACC,EAAO;IACjBZ,OAAO,CAACC,GAAG,CAAC,IAAI,CAACR,GAAG,GAAG,WAAW,GAAGmB,EAAE,CAAC;IACxC,OAAO,IAAI,CAACpB,IAAI,CAACqB,GAAG,CAAC,IAAI,CAACpB,GAAG,GAAG,WAAW,GAAGmB,EAAE,CAAC;EACnD;EACAE,OAAOA,CAACC,IAAS;IACf,OAAO,IAAI,CAACvB,IAAI,CAACgB,IAAI,CAAC,IAAI,CAACf,GAAG,GAAG,QAAQ,EAAEsB,IAAI,EAAE;MAC/CN,YAAY,EAAE;KACf,CAAC;EACJ;EACAO,UAAUA,CAACJ,EAAO;IAChB,OAAO,IAAI,CAACpB,IAAI,CAACyB,MAAM,CAAC,IAAI,CAACxB,GAAG,GAAG,QAAQ,GAAGmB,EAAE,EAAE;MAChDH,YAAY,EAAE;KACf,CAAC;EACJ;;SAzDWnB,YAAY;;mBAAZA,MAAY,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAZ/B,MAAY;EAAAgC,OAAA,EAAZhC,MAAY,CAAAiC,IAAA;EAAAC,UAAA,EAFX;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}