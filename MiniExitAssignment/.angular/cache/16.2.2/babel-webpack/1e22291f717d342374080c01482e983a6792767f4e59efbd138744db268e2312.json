{"ast":null,"code":"export const authGuard = (route, state) => {\n  return true;\n};\nexport class AuthGuard {\n  constructor(notesService, router) {\n    this.notesService = notesService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    if (this.notesService.isLoggedIn()) {\n      return true;\n    }\n    this.router.navigate(['/login']);\n    return false;\n  }\n}","map":{"version":3,"names":["authGuard","route","state","AuthGuard","constructor","notesService","router","canActivate","isLoggedIn","navigate"],"sources":["C:\\Users\\namangarg01\\Desktop\\Angular Codes\\MiniExitAssignment\\src\\app\\services\\auth.guard.ts"],"sourcesContent":["import {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  CanActivateFn,\n  Router,\n  RouterStateSnapshot,\n  UrlTree,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { NotesService } from './notes.service';\n\nexport const authGuard: CanActivateFn = (route, state) => {\n  return true;\n};\nexport class AuthGuard implements CanActivate {\n  constructor(private notesService: NotesService, private router: Router) {}\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | boolean\n    | UrlTree\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree> {\n    if (this.notesService.isLoggedIn()) {\n      return true;\n    }\n    this.router.navigate(['/login']);\n    return false;\n  }\n}\n"],"mappings":"AAWA,OAAO,MAAMA,SAAS,GAAkBA,CAACC,KAAK,EAAEC,KAAK,KAAI;EACvD,OAAO,IAAI;AACb,CAAC;AACD,OAAM,MAAOC,SAAS;EACpBC,YAAoBC,YAA0B,EAAUC,MAAc;IAAlD,KAAAD,YAAY,GAAZA,YAAY;IAAwB,KAAAC,MAAM,GAANA,MAAM;EAAW;EACzEC,WAAWA,CACTN,KAA6B,EAC7BC,KAA0B;IAM1B,IAAI,IAAI,CAACG,YAAY,CAACG,UAAU,EAAE,EAAE;MAClC,OAAO,IAAI;;IAEb,IAAI,CAACF,MAAM,CAACG,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAChC,OAAO,KAAK;EACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}