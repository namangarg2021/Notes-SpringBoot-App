{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./notes.service\";\nimport * as i2 from \"@angular/router\";\nexport const authGuard = (route, state) => {\n  return true;\n};\nexport class AuthGuard {\n  constructor(notesService, router) {\n    this.notesService = notesService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    console.log(this.notesService.isLoggedIn());\n    if (this.notesService.isLoggedIn()) {\n      return true;\n    }\n    this.router.navigate(['/login']);\n    return false;\n  }\n}\n_class = AuthGuard;\n_class.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.NotesService), i0.ɵɵinject(i2.Router));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["authGuard","route","state","AuthGuard","constructor","notesService","router","canActivate","console","log","isLoggedIn","navigate","i0","ɵɵinject","i1","NotesService","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\namangarg01\\Desktop\\Angular Codes\\MiniExitAssignment\\src\\app\\services\\auth.guard.ts"],"sourcesContent":["import {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  CanActivateFn,\n  Router,\n  RouterStateSnapshot,\n  UrlTree,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { NotesService } from './notes.service';\nimport { Injectable } from '@angular/core';\n\nexport const authGuard: CanActivateFn = (route, state) => {\n  return true;\n};\n@Injectable({\n  providedIn: 'root', // ADDED providedIn root here.\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private notesService: NotesService, private router: Router) {}\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | boolean\n    | UrlTree\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree> {\n    console.log(this.notesService.isLoggedIn());\n    if (this.notesService.isLoggedIn()) {\n      return true;\n    }\n    this.router.navigate(['/login']);\n    return false;\n  }\n}\n"],"mappings":";;;;AAYA,OAAO,MAAMA,SAAS,GAAkBA,CAACC,KAAK,EAAEC,KAAK,KAAI;EACvD,OAAO,IAAI;AACb,CAAC;AAID,OAAM,MAAOC,SAAS;EACpBC,YAAoBC,YAA0B,EAAUC,MAAc;IAAlD,KAAAD,YAAY,GAAZA,YAAY;IAAwB,KAAAC,MAAM,GAANA,MAAM;EAAW;EACzEC,WAAWA,CACTN,KAA6B,EAC7BC,KAA0B;IAM1BM,OAAO,CAACC,GAAG,CAAC,IAAI,CAACJ,YAAY,CAACK,UAAU,EAAE,CAAC;IAC3C,IAAI,IAAI,CAACL,YAAY,CAACK,UAAU,EAAE,EAAE;MAClC,OAAO,IAAI;;IAEb,IAAI,CAACJ,MAAM,CAACK,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAChC,OAAO,KAAK;EACd;;SAhBWR,SAAS;;mBAATA,MAAS,EAAAS,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,YAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;;SAATd,MAAS;EAAAe,OAAA,EAATf,MAAS,CAAAgB,IAAA;EAAAC,UAAA,EAFR;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}