{"ast":null,"code":"var _class;\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./notes.service\";\nexport class AuthInterceptor {\n  constructor(notesService) {\n    this.notesService = notesService;\n  }\n  intercept(req, next) {\n    const token = this.notesService.getToken();\n    if (token == null) {\n      return next.handle(req);\n    }\n    //console.log(token);\n    const auth = 'Bearer ' + this.notesService.getToken();\n    //console.log(auth);\n    let tokenizedReq = req;\n    tokenizedReq = req.clone({\n      headers: req.headers.set('Authorization', auth)\n    });\n    console.log(tokenizedReq);\n    return next.handle(tokenizedReq);\n  }\n}\n_class = AuthInterceptor;\n_class.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.NotesService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n});\nexport const authInterceptorProviders = [{\n  provide: HTTP_INTERCEPTORS,\n  useClass: AuthInterceptor,\n  multi: true\n}];","map":{"version":3,"names":["HTTP_INTERCEPTORS","AuthInterceptor","constructor","notesService","intercept","req","next","token","getToken","handle","auth","tokenizedReq","clone","headers","set","console","log","i0","ɵɵinject","i1","NotesService","factory","ɵfac","authInterceptorProviders","provide","useClass","multi"],"sources":["C:\\Users\\namangarg01\\Desktop\\Angular Codes\\MiniExitAssignment\\src\\app\\services\\auth.interceptor.ts"],"sourcesContent":["import {\n  HttpInterceptor,\n  HttpEvent,\n  HttpRequest,\n  HttpHandler,\n  HTTP_INTERCEPTORS,\n} from '@angular/common/http';\nimport { Injectable, Injector } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { NotesService } from './notes.service';\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private notesService: NotesService) {}\n\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const token = this.notesService.getToken();\n    if (token == null) {\n      return next.handle(req);\n    }\n    //console.log(token);\n\n    const auth = 'Bearer ' + this.notesService.getToken();\n\n    //console.log(auth);\n\n    let tokenizedReq = req;\n    tokenizedReq = req.clone({\n      headers: req.headers.set('Authorization', auth),\n    });\n    console.log(tokenizedReq);\n    return next.handle(tokenizedReq);\n  }\n}\nexport const authInterceptorProviders = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: AuthInterceptor,\n    multi: true,\n  },\n];\n"],"mappings":";AAAA,SAKEA,iBAAiB,QACZ,sBAAsB;;;AAK7B,OAAM,MAAOC,eAAe;EAC1BC,YAAoBC,YAA0B;IAA1B,KAAAA,YAAY,GAAZA,YAAY;EAAiB;EAEjDC,SAASA,CACPC,GAAqB,EACrBC,IAAiB;IAEjB,MAAMC,KAAK,GAAG,IAAI,CAACJ,YAAY,CAACK,QAAQ,EAAE;IAC1C,IAAID,KAAK,IAAI,IAAI,EAAE;MACjB,OAAOD,IAAI,CAACG,MAAM,CAACJ,GAAG,CAAC;;IAEzB;IAEA,MAAMK,IAAI,GAAG,SAAS,GAAG,IAAI,CAACP,YAAY,CAACK,QAAQ,EAAE;IAErD;IAEA,IAAIG,YAAY,GAAGN,GAAG;IACtBM,YAAY,GAAGN,GAAG,CAACO,KAAK,CAAC;MACvBC,OAAO,EAAER,GAAG,CAACQ,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEJ,IAAI;KAC/C,CAAC;IACFK,OAAO,CAACC,GAAG,CAACL,YAAY,CAAC;IACzB,OAAOL,IAAI,CAACG,MAAM,CAACE,YAAY,CAAC;EAClC;;SAvBWV,eAAe;;mBAAfA,MAAe,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,YAAA;AAAA;;SAAfnB,MAAe;EAAAoB,OAAA,EAAfpB,MAAe,CAAAqB;AAAA;AAyB5B,OAAO,MAAMC,wBAAwB,GAAG,CACtC;EACEC,OAAO,EAAExB,iBAAiB;EAC1ByB,QAAQ,EAAExB,eAAe;EACzByB,KAAK,EAAE;CACR,CACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}