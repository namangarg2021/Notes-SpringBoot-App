{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/namangarg01/Desktop/Angular Codes/MiniExitAssignment/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let RegistrationComponent = class RegistrationComponent {\n  get username() {\n    return this.Registration.get('username');\n  }\n  get firstname() {\n    return this.Registration.get('firstname');\n  }\n  get lastname() {\n    return this.Registration.get('lastname');\n  }\n  get password() {\n    return this.Registration.get('password');\n  }\n  get confirmPassword() {\n    return this.Registration.get('confirmPassword');\n  }\n  constructor(productService, router) {\n    this.productService = productService;\n    this.router = router;\n    this.Registration = new FormGroup({\n      username: new FormControl('', [Validators.email, Validators.required]),\n      firstname: new FormControl('', [Validators.pattern('[a-zA-Z][a-zA-Z ]+'), Validators.required]),\n      lastname: new FormControl('', [Validators.pattern('[a-zA-Z][a-zA-Z ]+'), Validators.required]),\n      password: new FormControl('', [Validators.required]),\n      confirmPassword: new FormControl('', [Validators.required])\n    });\n    this.error = false;\n  }\n  ngOnInit() {}\n  register() {\n    var _this = this;\n    if (this.password?.value != this.confirmPassword?.value) {\n      this.error = true;\n      this.msg = 'Password and Confirm Password do not match!!!';\n      return;\n    }\n    this.productService.getlogin(this.Registration.value.username).subscribe(result => {\n      this.r = result;\n      if (this.r == null) {\n        var _ref;\n        this.productService.postregister(this.Registration.value).subscribe(function (_x) {\n          return (_ref = _ref || _asyncToGenerator(function* (result) {\n            _this.r = result;\n            yield Swal.fire({\n              title: \"<h5 style='color:green;font-size:30px'>User Registered Successfully!</h5>\",\n              timer: 1000,\n              showConfirmButton: false,\n              icon: 'success'\n            });\n            _this.router.navigate(['login']);\n          })).apply(this, arguments);\n        });\n      } else {\n        this.error = true;\n        this.msg = 'User Already Exists!!!';\n      }\n    });\n  }\n};\nRegistrationComponent = __decorate([Component({\n  selector: 'app-registration',\n  templateUrl: './registration.component.html',\n  styleUrls: ['./registration.component.css']\n})], RegistrationComponent);","map":{"version":3,"names":["Component","RegistrationComponent","username","Registration","get","firstname","lastname","password","confirmPassword","constructor","productService","router","FormGroup","FormControl","Validators","email","required","pattern","error","ngOnInit","register","_this","value","msg","getlogin","subscribe","result","r","_ref","postregister","_x","_asyncToGenerator","Swal","fire","title","timer","showConfirmButton","icon","navigate","apply","arguments","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\namangarg01\\Desktop\\Angular Codes\\MiniExitAssignment\\src\\app\\registration\\registration.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { NotesService } from '../services/notes.service';\nimport { Router } from '@angular/router';\nimport { RouterModule, Routes } from '@angular/router';\n@Component({\n  selector: 'app-registration',\n  templateUrl: './registration.component.html',\n  styleUrls: ['./registration.component.css'],\n})\nexport class RegistrationComponent {\n  Registration = new FormGroup({\n    username: new FormControl('', [Validators.email, Validators.required]),\n    firstname: new FormControl('', [\n      Validators.pattern('[a-zA-Z][a-zA-Z ]+'),\n      Validators.required,\n    ]),\n    lastname: new FormControl('', [\n      Validators.pattern('[a-zA-Z][a-zA-Z ]+'),\n      Validators.required,\n    ]),\n    password: new FormControl('', [Validators.required]),\n    confirmPassword: new FormControl('', [Validators.required]),\n  });\n  error = false;\n\n  get username() {\n    return this.Registration.get('username');\n  }\n  get firstname() {\n    return this.Registration.get('firstname');\n  }\n  get lastname() {\n    return this.Registration.get('lastname');\n  }\n  get password() {\n    return this.Registration.get('password');\n  }\n  get confirmPassword() {\n    return this.Registration.get('confirmPassword');\n  }\n\n  constructor(private productService: ProductService, private router: Router) {}\n\n  ngOnInit(): void {}\n  r: any;\n  msg: any;\n  register() {\n    if (this.password?.value != this.confirmPassword?.value) {\n      this.error = true;\n      this.msg = 'Password and Confirm Password do not match!!!';\n      return;\n    }\n\n    this.productService\n      .getlogin(this.Registration.value.username)\n      .subscribe((result) => {\n        this.r = result;\n\n        if (this.r == null) {\n          this.productService\n            .postregister(this.Registration.value)\n            .subscribe(async (result) => {\n              this.r = result;\n              await Swal.fire({\n                title:\n                  \"<h5 style='color:green;font-size:30px'>User Registered Successfully!</h5>\",\n                timer: 1000,\n                showConfirmButton: false,\n                icon: 'success',\n              });\n              this.router.navigate(['login']);\n            });\n        } else {\n          this.error = true;\n          this.msg = 'User Already Exists!!!';\n        }\n      });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}